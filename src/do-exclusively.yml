version: 2.1

description: |
  This is a simple helper script to ensure that a certain action happens once at a time on a CircleCI project.
  It is a higher-order command like sudo, so you can wrap whatever other commands you want with it.
  This orb is inspired by https://github.com/bellkev/circle-lock-test
  Orb repo: https://github.com/miyajan/do-exclusively-orb

commands:
  do-exclusively:
    description: |
      Run command exclusively.
      This depends on jq.
    parameters:
      token:
        description: |
          The env var containing CircleCI API token that can read builds for the project (either a user or project API token will work).
          Pass this as a literal string such as `$CIRCLE_TOKEN`.
          Do not paste the actual token into your configuration.
        type: string
      branch:
        description: |
          Branch to filter builds for, if present only builds for this branch are considered
        type: string
      jobs:
        description: |
          Delimited list of Workflow job names that should block this build i.e. "deploy-tests remote-test"
        type: string
      maxWait:
        description: |
          Maximum number of seconds to wait before failing build
        type: integer
        default: 600
    steps:
    - run:
        name: Run command exclusively
        command: |

          # reads $branch, $tag
          # sets $jq_prog
          make_jq_prog() {
              local jq_filters=""

              if [[ $branch ]]; then
                  jq_filters+=" and .branch == \"$branch\""
              fi


              # allow specifying the other jobs this should be blocked by
              if [ ${#jobs[@]} -gt 0 ]; then
                  jobs_as_json=$(printf '%s\n' "${jobs[@]}" | jq -R . | jq -sc .)
                  jq_filters+=" and ($jobs_as_json as \$blacklist | . as \$item | \$blacklist | all(. == \$item.workflows.job_name))"
              fi
              

              jq_prog=".[] | select(.build_num < $CIRCLE_BUILD_NUM and (.status | test(\"running|pending|queued\")) $jq_filters) | .build_num"
              echo "Using JQ Prog: " + $jq_prog
          }


          set -e
          set -u
          set -o pipefail
          branch="<< parameters.branch >>"
          IFS=', ' read -r -a jobs \<<< "<< parameters.jobs >>"
          api_url="https://circleci.com/api/v1/project/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?circle-token=<< parameters.token >>&limit=100"
          make_jq_prog

          echo "Checking for running builds..."

          while true; do
              builds=$(curl -s -H "Accept: application/json" "$api_url" | jq "$jq_prog")
              if [[ $builds ]]; then
                  echo "Waiting on builds:"
                  echo "$builds"
              else
                  break
              fi
              if [[ "$SECONDS" -gt << parameters.maxWait >> ]]; then
                 echo "Waited for $SECONDS seconds"
                 exit 1;
              fi
              echo "Retrying in 5 seconds..."
              sleep 5
          done

          echo "Acquired lock"
